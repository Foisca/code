《数据结构》实验题目
实验一 客房管理（链表实验）
	实现功能：采用结构化程序设计思想，编程实现客房管理程序的各个功能函数，从而熟练掌握单链表的创建、输出、查找、修改、插入、删除、排序和复杂综合应用等操作的算法实现。以带表头结点的单链表为存储结构，实现如下客房管理的设计要求。
	实验机时：8
	设计要求：
(1)实现创建客房信息链表函数void Build(HLink &H)，输入（客房名称、标准价格、床位数），同时修改入住价格、入住状态为默认值，即入住价格=标准价格*80%，入住状态为”空闲”（提示：用strcpy()字符串拷贝函数）。为了提高程序调试效率，要求：用文件操作来输入客房信息（客房名称、标准价格、床位数）；
(2)实现输出客房信息函数void Exp(HLink H)，输出所有客房的客房名称、标准价格、入住价格、床位数、入住状态；
(3)函数int Find(HLink &H, char *roomN)，查找房间名称为roomN的客房。如果找到，则返回该客房在链表中的位置序号（>=1），否则返回0。提示：用strcmp()字符串比较函数；
(4)实现函数void updateH(HLink &H, int beds, char *state)，将床位数为beds的客房入住状态改为state。提示：用strcpy()字符串拷贝函数；
(5)函数void Add(HLink &H)，将该链表中未入住的客房入住价格均加价20%；
(6)求出入住价格最高的客房函数HLink FirstH(HLink &H)，该函数内return语句返回入住价格最高的客房结点指针，返回前将该结点在链表中删除；
(7)函数void MoveK1(HLink &H, int k)，将单链表中倒数第k个结点之后的所有结点移到头结点后面，注意：严禁采用先计算链表长度n再减k（即n-k）的方法；
(8)函数void ReverseN2(HLink &H)，将单链表的正中间位置结点之后的全部结点倒置的功能，注意：严禁采用先计算链表长度n再除以2（即n/2）的方法；
(9)函数void SortPriceL(HLink &H)，按照客房（入住价格，客房名称）升序排序；
(10)函数void upBed(HLink &H,int beds)，创建一个【床位数为beds的新结点】（还需输入：客房名称、标准价格等信息），使链表的形态为：【头结点】->【床位数>beds的结点】->【床位数为beds的新结点】->【床位数<=beds的结点】，要求【超过beds的结点】和【不超过beds的结点】这两段链表中的结点保持原来的前后相对顺序；
(11)实现函数void Merge(HLink &H1, HLink &H2)，将两个按入住价格非递减排序的客房记录单合并为一个按入住价格非递增排序的客房记录单；要求算法的时间复杂度不超过两个链表的长度之和O(m+n)；
(12)主函数main()调用以上函数，（3）若返回值>=1则输出该客房在链表中的位置序号，否则输出该客房不存在；输出（4）~（10）处理后的链表内容，其中（6）还要输出入住价格最高的客房信息。

可能用到的函数：
从文件中读取客房数据：fscanf(文件指针,"%s %f,%d",p->roomN,&p->Price,&p->Beds);
输出客房数据：printf("%s%8.1f%8.1f%6d%8s\n",p->roomN,p->Price,p->PriceL,p->Beds,p->State);
字符串赋值函数：char* strcpy(char *, const char *);
字符串比较函数：int strcmp(const char *, const char *)

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
//定义客房链表结点结构
typedef struct HNode
	{
		char	roomN[7];	//客房名称
		float   Price;		//标准价格
		float   PriceL;	//入住价格(默认值=标准价格*80%)
		int	   Beds;		//床位数Beds
		char	   State[5];	//入住状态(值域："空闲"、"入住"、"预订"，默认值为"空闲")
		struct HNode  *next;	//指针域
	}Hotel, *HLink;


实验二 串模式匹配算法（串实验）
	实现功能： 从主串中第K个字符起，求出子串在主串中首次出现的位置，即模式匹配或串匹配。要求用三种模式匹配算法分别实现：
	朴素的模式匹配算法（BF算法）
	KMP改进算法(Next[ ])
	KMP改进算法(NextVal[ ])
	实验机时：8
	设计要求：
首先设计一个含有多个菜单项的主控菜单程序，然后再为这些菜单项配上相应的功能。
程序运行后，给出5个菜单项的内容和输入提示：
1．输入主串、子串和匹配起始位置
2．朴素的模式匹配算法
3．KMP改进算法(Next[ ])
4．KMP改进算法(NextVal[ ])
0．退出管理系统
请选择0—4：
菜单设计要求：使用数字0—4来选择菜单项，其它输入则不起作用。
输出结果要求：输出各趟匹配详细过程（其中3、4，首先输出Next[ ]或者NextVal[ ]的各元素的数值），然后输出匹配总趟数、单个字符比较次数、匹配成功时的位置序号或者匹配失败提示信息。


实验三 二叉树遍历与路径查找（二叉树实验）
	实现功能：建立二叉树存储结构、求二叉树的先序遍历、求二叉树的中序遍历、求二叉树的后序遍历、求二叉树的层次遍历、求根到给定结点的路径。
	实验机时：8
	设计要求：
数据结构：
typedef struct  node{
	char data;	//数据域
	struct node *lchild ,  *rchild;  //左右孩子指针
}BinTNode, *BinTree;   //树中结点类型

首先设计一个含有多个菜单项的主控菜单程序，然后再为这些菜单项配上相应的功能。
程序运行后，给出如下菜单项的内容和输入提示，使用数字0—6来选择菜单项，其它输入则不起作用：
1．建立二叉树存储结构
2．求二叉树的先序遍历
3．求二叉树的中序遍历
4．求二叉树的后序遍历
5．求二叉树的层次遍历
6．求给定结点的路径
7. 求树的深度
0．退出系统
请选择0—7：
